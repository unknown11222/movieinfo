JPA(Java Persistence API)
Persistence(영속성):데이터를 생성한 프로그램이 종료되어도 데이터는 유지됨(DB 연동)
JPA는 자바에서 관계형 DB를 사용하는 방식을 정의한 인터페이스 관련 API
MyBatis와 병행 불가

관계형 DB(RDB):테이블(엔티티)과 테이블 간의 관계(외래키)로 데이터를 저장하는 방식의 데이터베이스
-MySQL, Oracle, MariaDB...etc
자바 애플리케이션 <-> RDB:MyBatis, JAP
Dependency>
    Spring Data JPA
    Hibernate:JPA의 구현체(클래스)

Entity 클래스를 구현하면 해당 클래스에서 지정한 테이블 이름 및 컬럼 이름으로 DB 테이블을 자동 생성하며,
DB CRUD에 대한 메소드를 제공. 메소드 이름으로 SQL 쿼리문을 생성하는 방식을 사용.
기존 SQL 쿼리문도 사용 가능

application.properties 설정
    -DevTools
    -static 폴더
    -서버 포트 번호 설정
    -DB 관련 설정(log4jdbc 사용 안함)
    -DB 로그 설정
    -jpa 설정
    -error 관련 설정
    -multipart 파일 업로드 제한 설정(필요에 따라)
    -log4jdbc 사용 불가

# port number setting
server.port=80
# datasource setting
spring.web.resources.static-locations=classpath:static/
# devtools setting
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true
spring.thymeleaf.cache=false
# database source setting
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/jpadb?serverTimezone=Asia/Seoul
spring.datasource.username=jpauser
spring.datasource.password=P@ssw0rd
# DB log
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
logging.level.org.hibernate.type.descriptor.sql=trace
# jpa setting
spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=update
# error page setting
server.error.whitelabel.enabled=false
server.error.path=/error/
server.error.include-message=always
server.error.include-exception=true
server.error.include-stacktrace=always
# sessionId delete
server.servlet.session.tracking-modes=cookie

build.gradle에 추가

implementation 'org.modelmapper:modelmapper:3.1.1'

DB log 설정
-spring.jpa.properties.hibernate.show_sql=true:jpa 에서 생성하여 실행하는 SQL 쿼리문을 출력
-spring.jpa.properties.hibernate.format_sql=true:SQL을 보기 좋게 출력
-spring.jpa.properties.hibernate.use_sql_comments=true:SQL 쿼리문에 주석을 달아줌
-~.org.hibernate.sql=debug:쿼리 실행 시간까지 같이 출력
-logging.level.org.hibernate.type.descriptor.sql=trace:쿼리문에 사용된 입력값 확인

JPA 설정
spring.jpa.database=mysql:사용하는 DB 제품명(mysql, oracle 등)
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect:각 DBMS에 맞게 SQL을 생성하도록 도와주는 방언 객체 설정
spring.jpa.generate-ddl=false:DDL 쿼리문 생성 시 DB 고유 기능 사용 여부를 지정.
    true=해당 데이터를 근거로 서버 시작 시 DDL 문을 생성하여 DB에 적용
spring.jpa.hibernate.ddl-auto(JPA 초기화 전략 설정)
    1)none:아무 작업도 하지 않음(DB에 테이블을 직접 생성)
    2)create:서버가 시작될 때 기존 테이블을 DROP를 하고 새 DDL 실행(데이터 재생성). 개발용
    3)create-drop:서버가 시작될 때 기존 테이블을 DROP 및 생성, 서버가 종료될 때 테이블을 drop
    4)update:기존 테이블에 해당하는 Entity 클래스가 변경되면 서버 시작 시 기존 테이블을 DROP하고, 새로운 Entity로 테이블을 생성(많이 씀)
    5)valdate:Entity 클래스와 테이블의 잘 맵핑되어 있는지 확인하여, 맞지 않은 경우 프로그램 종료

유저 생성 쿼리문
create database if not exists jpadb;
create user if not exists jpauser@'%' identified by 'P@ssw0rd';
grant all privileges on jpadb.* to jpauser@'%';
ALTER USER 'jpauser'@'%' IDENTIFIED WITH mysql_native_password BY 'P@ssw0rd';
FLUSH PRIVILEGES;

entity class
    DB 테이블과 연계하기 위한 클래스
    DTO의 역할도 함꼐 처리할 수 있으나, 따로 작성하는 것을 권장

    간단한 테이블 명세
    테이블 명:jpatbl
    컬럼>
        code:자동 증가, 기본키
        str_data:문자열 저장. 길이 50자. 필수 입력(not null)
        int_data:정수 저장. null 허용
        reg_data:삽입 날짜/시간 저장. 기본값

Entity 클래스에서 사용하는 애노테이션
1)@Entity:클래스가 Entity 임을 선언
2)@Table:DB 테이블의 이름을 지정. 생략 시 Entity의 이름을 그대로 테이블명으로 사용.
    테이블명은 스네이크 케이스를 사용하는 것이 좋음.(클래스명-파스칼 케이스, 테이블명-스네이크 케이스)
3)@Id:필드(기본키)를 테이블의 기본키로 설정.(반드시 작성)
4)@GeneratedValue(option):자동으로 생성되는 키값에 대한 설정
    MySQL의 Auto-increment는 GenerationType.IDENTITY로 설정.(RDB마다 다름. 오라클의 경우 GenerationType.AUTO)
5)@Column:필드를 테이블에 컬럼으로 설정.(생략 시 필드명을 컬럼명으로) 컬럼에 대한 여러 설정을 처리.
    -name:컬럼명. 픨드명과 다르게 지정할 경우 사용
    -nullable:false->NOT NULL true->null 혀용
    -length:컬럼의 길이 지정
    -columnDefinition="DATE DEFAULT CURRENT_DATE"(시간이나 날짜를 기본값으로 처리할 경우 사용)
6)@ColumnDefault("값"):(날짜나 시간이 아닌)컬럼에 기본값 설정. 문자열로 값을 작성(정수 칼럼에 0을 기본값으로 설정->0)
7)@CreationTimestamp/@UpdateTimestamp:insert/update:날짜시간을 기본값으로 설정(컬럼 타입이 datatime일 경우)

주의)하나의 엔티디 당 하나의 테이블만 만들 수 있음

Repository 인터페이스
    DAO 역할을 하는 인터페이스. JpaRepository 인터페이스를 상속받아서 작성
    작성 시 엔티티를 지정
    해당 엔티티와 테이블에 처리할 작업을 지정(CRUD)
    기본적으로 제공되는 메소드가 존재
    1)save:insert, update 처리
        insert:테이블에 키 필드 값이 있음
        update:테이블에 키 필드 값이 없음

    2)delete:delete 처리

    3)findAll:제약 없이 모든 행을 select

    4)findById:기본키에 해당하는 행을 select. 결과값은 Optional 객체.
        Optional:null을 포함할 수 있는 컨테이너 객체. 즉 조회한 데이터가 없어서 처리할 수 없는 상황
        NullPointException으로 인한 추가 로직을 작성할 필요가 없도록 하는 객체.
        데이터가 있으면 변수에 담고, 없으면 null을 담고 null 처리 로직도 제공
        Optional.get():Optional객체에 담긴 데이터를 꺼내는 메소드

    5)findByXX:Repository에 메소드 선언. XX에 컬럼명을 카멜 케이스로 작성
        member 테이블에 mname, mage 컬럼이 있을 경우
        findByMname("name");
            > SELECT * FROM member WHERE mname="name";
        and/or 조건
        findByMnameAndMage("name", 20);
            > SELECT * FROM member WHERE mname="name" AND    mage=20;
        like 조건(아무거나 사용)
        findByMnameContains(keyword);
        findByMnameContaining(keyword);
        findByMnameisContaining(keyword);
            > SELECT * FROM member WHERE mname LIKE '%keyword%';

    6)JPQL:SQL 형식으로 작성하는 JPA Query 작성 문법
        - SELECT m FROM Member AS m WHERE m.mname=:name
            > 대소문자 구분
                - Entity와 변수는 대소문자를 구분
                - JPQL 키워드는 구분하지 않음(select, from 등)
            > 패러미터 변수를 WHERE 절에 넣을 때
                - @Query 애노테이션 에선 ':식별자'로 작성
                - @Param("식별자") 애노테이션을 매개변수 앞에 작성
                sometype method_name(@Param("name")String mname)
            > Entity 이름
                - 테이블 명 대신 Entity 명을 대신 사용 가능
                - @Entity(name="e_name")으로 설정
                안하면 클래스 이름을 사용
            > 별칭은 필수
                - AS는 생략 가능
                - SELECT 절에서 별칭만 사용하면 *와 같음

    7)native SQL Query를 사용할 수도 있음(일반 SQL)
        @Query(value="SQL Query", nativeQuery=true)
        method...
        ex1)
            @Query(value="SELECT * FROM table WHERE name=:name",  nativeQuery=true)
            DtoClass selectName(@Param("name") String mname);
        ex2)Dto와 같은 객체의 데이터를 가져올 때
            @Query(value="SELECT * FROM table" + "WHERE name=:#{paramDto.name}" + "AND age=:#{paramDto.age}, nativeQuery=true")
            DtoClass selectNameAndAge(@Param("paramDto") Dto dto);

상속(Inheritance):기존에 작성한 클래스(&인터페이스)를 활용하여 새 클래스를 파생(작성)
1)클래스 상속:extends 확장
2)인터페이스 상속:implements 구현

인터페이스 간 상속:기존에 작성한 인터페이스 를 활용하여 새 인터페이스를 작성. extends만 사용

DTO와 Entity의 관계
    Service를 중심으로 DB<->Service 사이에선 Entity,
    Service<->Controller 사이에선 DTO
    (Entity를 DTO 처럼 사용하는 것도 가능)

    Service는 중간에 Dto<-> Entity 변환 작업을 처리해야 함
    ModelMapper:Dto와 Entity 를 자동 맵핑하는 객체

매핑(변환, 바인딩)
1)DTO->ENTITY
    DtoClass dto;
    EntityClass entity=modelMapper.map(dto, EntityClass.class);
2)ENTITY->DTO
    EntityClass entity
    DtoClass dto=modelMapper.map(entity, DtoClass.class);
3)ENTITY List->DTO List
    List<EntityClass> eList;
    방식 1>
        List<DtoClass> dList = modelMapper.map(eList, new TypeToken<List<DtoClass>>() {}.getType());
    방식 2>
        List<DtoClass> dList = eList.stream().map(dto->modelMapper.map(dto, DtoClass.class)).collect(Collectors.toList());

참고)프로그램 실행 후 주소칸에 sessionId가 나오는 것을 제거
application.properties에 server.servlet.session.tracking-modes=cookie 작성

영화 정보 사이트
이름:movietbl
컬럼
    - 일련번호:mcode(PK)
    - 제목:mname not null(100자)
    - 감독:mdirector not null 50자
    - 국가:mnation not null 50자
    - 장르:mgenre not null 100자
    - 주연배우:mactor not null 100자
    - 개봉일:mopen not null 10자
    - 영화개요:msynopsis(2000자)
    - 포스터:moriname(50자), msysname(50자)

태그 정보
이름:tagtbl
컬럼
    - 일련번호:tcode(PK) Long
    - 영화일련번호:tmcode Long
    - 정보ID:tid not null Double
    - 단어:tword not null 20자
    - 타입:ttype. not null 30자
    - 반복횟수:tcount. not null int
    (공공 인공지능 OPEN API DATA 서비스 포털 https://aiopen.etri.re.kr/)

MySQL 정보
user name:jpauser
DB Schema:jpadb

추가 Dependency
    - ModelMapper:DTO<->Entity
    - Gson:Open API 응답 JSON 처리

JPA에서의 paging 처리
Pageable 객체를 활용한 페이징.
관련 객체:Page, Pageable, PageRequest
    - Page:Paging한 데이터를 담는 객체(Entity 를 기반으로 저장) 페이지의 전체 개수를 담고 있음
    - Pageable:Paging을 처리. DB와 연동하여 조건에 밎는 범위의 데이터를 가져옴
    - PageRequest:조건을 작성하는 객체. 페이지 번호, 정렬 방식 등을 저장
    - PageRequest.of() 메소드
        1)페이지 번호:0번부터
        2)목록 개수:페이지 당 보여질 항목 개수
        3)정렬 방식:ASC(오름차순), DESC(내림차순)
        4)정렬 기준:정렬에 사용할 컬럼명을 지정


공공 인공지능 오픈 API·DATA 서비스 포털
	과기부 R&D 과제를 통해 개발된 인공지능 결과물을 체험하고
	연구에 활용할 수 있도록 제공하는 사이트

	제공 API(https://aiopen.etri.re.kr/serviceList)
	1) 언어 분석 기술
	2) 어휘관계 분석 기술
	3) 질의응답 기술
	4) 음성인식 기술
	5) 발음평가 기술
	6) 이미지 인식 기술
	7) 동영상 인식 기술

	이용 방법(https://aiopen.etri.re.kr/keyMain)
		키 발급 신청 -> 관리자 승인(자동) -> 키 발급 확인 및 활용.
		키 발급에 필요한 정보 : 이메일(가입 없음).
			인증 후 정보 입력 및 비밀번호 지정.
			사용 기한 제한 없음.

	개발 진행 : API 개발 가이드 활용
		Java, PHP, C++, Python, Node.js로 소스 코드(활용 예제)를 제공.
		제공된 소스코드를 수정하여 프로젝트를 작성.
		언어 분석 기술 : https://aiopen.etri.re.kr/guide/WiseNLU
		음성 인식 기술 : https://aiopen.etri.re.kr/guide/Recognition
		이미지 인식 기술 : https://aiopen.etri.re.kr/demo/od
		본 프로젝트에서는 제공된 언어 분석 기술의 Java 코드를 가공하여 활용.

	추가 Dependency : gson (구글에서 제공하는 json 객체 처리 라이브러리)
		implementation 'com.google.code.gson:gson:2.10.1'
		다운로드 형식 : JSON

	활용 대상 : 언어 분석 API
	언어 분석을 위한 API는 REST API이며, 언어 분석을 수행할 텍스트 데이터를
	HTTP 통신으로 ETRI 인공지능 Open API 서버에 전달.
	서버가 제공하는 REST API의 URI는 다음과 같으며 POST 방식으로 호출.

	문어체
	http://aiopen.etri.re.kr:8000/WiseNLU
	구어체
	http://aiopen.etri.re.kr:8000/WiseNLU_spoken

	해시태그에 사용할 태그셋 - 개체명 태그셋(NE)
		구성)
			id : 식별용 일련번호
			text : 해당 문자열 - word
			type : 세분류 태그셋
			그 외 기타(begin, end, weight, common_noun)